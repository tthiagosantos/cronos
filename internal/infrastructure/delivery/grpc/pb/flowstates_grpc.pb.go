// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/infrastructure/delivery/grpc/proto/flowstates.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlowDataServiceClient is the client API for FlowDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowDataServiceClient interface {
	GetFlowData(ctx context.Context, in *FlowDataRequest, opts ...grpc.CallOption) (FlowDataService_GetFlowDataClient, error)
}

type flowDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowDataServiceClient(cc grpc.ClientConnInterface) FlowDataServiceClient {
	return &flowDataServiceClient{cc}
}

func (c *flowDataServiceClient) GetFlowData(ctx context.Context, in *FlowDataRequest, opts ...grpc.CallOption) (FlowDataService_GetFlowDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlowDataService_ServiceDesc.Streams[0], "/pb.FlowDataService/GetFlowData", opts...)
	if err != nil {
		return nil, err
	}
	x := &flowDataServiceGetFlowDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlowDataService_GetFlowDataClient interface {
	Recv() (*FlowDataResponse, error)
	grpc.ClientStream
}

type flowDataServiceGetFlowDataClient struct {
	grpc.ClientStream
}

func (x *flowDataServiceGetFlowDataClient) Recv() (*FlowDataResponse, error) {
	m := new(FlowDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FlowDataServiceServer is the server API for FlowDataService service.
// All implementations must embed UnimplementedFlowDataServiceServer
// for forward compatibility
type FlowDataServiceServer interface {
	GetFlowData(*FlowDataRequest, FlowDataService_GetFlowDataServer) error
	mustEmbedUnimplementedFlowDataServiceServer()
}

// UnimplementedFlowDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlowDataServiceServer struct {
}

func (UnimplementedFlowDataServiceServer) GetFlowData(*FlowDataRequest, FlowDataService_GetFlowDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFlowData not implemented")
}
func (UnimplementedFlowDataServiceServer) mustEmbedUnimplementedFlowDataServiceServer() {}

// UnsafeFlowDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowDataServiceServer will
// result in compilation errors.
type UnsafeFlowDataServiceServer interface {
	mustEmbedUnimplementedFlowDataServiceServer()
}

func RegisterFlowDataServiceServer(s grpc.ServiceRegistrar, srv FlowDataServiceServer) {
	s.RegisterService(&FlowDataService_ServiceDesc, srv)
}

func _FlowDataService_GetFlowData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FlowDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlowDataServiceServer).GetFlowData(m, &flowDataServiceGetFlowDataServer{stream})
}

type FlowDataService_GetFlowDataServer interface {
	Send(*FlowDataResponse) error
	grpc.ServerStream
}

type flowDataServiceGetFlowDataServer struct {
	grpc.ServerStream
}

func (x *flowDataServiceGetFlowDataServer) Send(m *FlowDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FlowDataService_ServiceDesc is the grpc.ServiceDesc for FlowDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FlowDataService",
	HandlerType: (*FlowDataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFlowData",
			Handler:       _FlowDataService_GetFlowData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/infrastructure/delivery/grpc/proto/flowstates.proto",
}
